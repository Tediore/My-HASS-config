- alias: Notify when tstat set to away
  initial_state: 'on'
  trigger:
  - platform: state
    entity_id: sensor.tstat_comfort_setting
    from: Home
    to: Away
  - platform: state
    entity_id: sensor.tstat_comfort_setting
    from: Sleep
    to: Away
  - platform: state
    entity_id: sensor.tstat_comfort_setting
    from: Hold
    to: Away
  condition:
  - condition: or
    conditions:
    - condition: state
      entity_id: climate.thermostat
      state: 'cool'
    - condition: state
      entity_id: climate.thermostat
      state: 'heat'
  action:
    service: notify.telegram
    data:
      message: "Thermostat has been set to away."


- alias: Notify tstat off when armed away
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: alarm_control_panel.abode
    to: armed_away
  condition:
    condition: state
    entity_id: climate.thermostat
    state: 'off'
  action:
    service: notify.telegram
    data:
      message: "Thermostat is off."


- alias: Notify lights on when away
  initial_state: 'on'
  trigger:
  - platform: state
    entity_id:
    - light.dining_room
    - light.living_room
    - light.master_bedroom
    - light.game_room
    - light.laundry_room
    from: 'off'
    to: 'on'
  condition:
  - condition: state
    entity_id: alarm_control_panel.abode
    state: armed_away
  action:
    service: notify.telegram
    data_template:
      message: "{{ trigger.to_state.name }} lights have been turned on."


- alias: Notify entrance light on when away
  initial_state: 'on'
  trigger:
  - platform: state
    entity_id: switch.light_switch1
    from: 'off'
    to: 'on'
    for: '00:00:45'
  condition:
  - condition: state
    entity_id: alarm_control_panel.abode
    state: armed_away
  action:
    service: notify.telegram
    data_template:
      message: "{{ trigger.to_state.name }} lights have been turned on."


- alias: Notify lights off when away
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: group.lights_interior
    from: 'on'
    to: 'off'
  condition:
  - condition: state
    entity_id: alarm_control_panel.abode
    state: armed_away
  action:
    service: notify.telegram
    data:
      message: "Lights have been turned off."


- alias: Notify when storm door opened
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: binary_sensor.storm_door
    from: 'off'
    to: 'on'
  condition:
    condition: or
    conditions:
    - condition: state
      entity_id: alarm_control_panel.abode
      state: 'armed_away'
    - condition: state
      entity_id: alarm_control_panel.abode
      state: 'armed_home'
  action:
    service: notify.telegram
    data:
      message: "Storm door has been opened."


- alias: Notify when storm door closed
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: binary_sensor.storm_door
    from: 'on'
    to: 'off'
  condition:
    condition: or
    conditions:
    - condition: state
      entity_id: alarm_control_panel.abode
      state: 'armed_away'
    - condition: state
      entity_id: alarm_control_panel.abode
      state: 'armed_home'
  action:
    service: notify.telegram
    data:
      message: "Storm door has been closed."


- alias: Notify when furnace filter needs replacement
  initial_state: 'on'
  trigger:
    platform: template
    value_template: "{{ states('sensor.furnace_filter_life') | float > states('input_number.replacement_threshold') | float }}"
    for: '00:01:00'
  action:
    service: notify.telegram
    data_template:
      message: "Furnace filter has been used for {{ states('input_number.replacement_threshold') | int }} hours."


- alias: Suggest opening the windows
  initial_state: 'on'
  trigger:
    platform: template
    value_template: "{{ (float(states('sensor.tstat_current_temp')) - float(states('sensor.outside_temp'))) | round(2) >= 10 }}"
  condition:
  - condition: state
    entity_id: sensor.tstat_mode
    state: 'Cool'
  - condition: numeric_state
    entity_id: sensor.outside_dewpoint
    below: 60
  - condition: or
    conditions:
    - condition: state
      entity_id: alarm_control_panel.abode
      state: armed_home
    - condition: state
      entity_id: alarm_control_panel.abode
      state: disarmed
  action:
  - service: automation.turn_off
    entity_id: automation.suggest_opening_the_windows
  - service: notify.telegram
    data_template:
      message: "Consider opening the windows. It's {{float(states('sensor.tstat_current_temp')) | round(0) }} inside and only {{float(states('sensor.outside_temp')) | round(0) }} outside."


- alias: Reset notify open windows
  initial_state: 'on'
  trigger:
  - platform: state
    entity_id: automation.suggest_opening_the_windows
    to: 'off'
    for: '08:00:00'
  action:
  - service: automation.turn_on
    entity_id: automation.suggest_opening_the_windows


- alias: Notify when humidity high
  initial_state: 'on'
  trigger:
  - platform: numeric_state
    entity_id: sensor.tstat_current_humidity
    above: 65
  action:
  - service: automation.turn_off
    entity_id: automation.notify_when_humidity_high
  - service: notify.telegram
    data_template:
      message: "Humidity is currently {{ float(states('sensor.tstat_current_humidity')) | round(0) }}%."


- alias: Reset notify when humidity high
  initial_state: 'on'
  trigger:
  - platform: state
    entity_id: automation.notify_when_humidity_high
    to: 'off'
    for: '08:00:00'
  action:
  - service: automation.turn_on
    entity_id: automation.notify_when_humidity_high


- alias: Notify when water leak detected
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: 
    - binary_sensor.water_sensor_1
    - binary_sensor.water_sensor_2
    from: 'off'
    to: 'on'
  action:
    service: notify.telegram
    data_template:
      message: "LEAK DETECTED BY {{ trigger.to_state.name }}!"


- alias: Notify when water leak cleared
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: 
    - binary_sensor.water_sensor_1
    - binary_sensor.water_sensor_2
    from: 'on'
    to: 'off'
  action:
    service: notify.telegram
    data_template:
      message: "{{ trigger.to_state.name }} cleared"


- alias: Notify when smoke or CO detected
  initial_state: 'on'
  trigger:
  - platform: state
    entity_id: sensor.zcombo_1_status
    to: 'Smoke'
  - platform: state
    entity_id: sensor.zcombo_1_status
    to: 'CO'
  condition:
    condition: state
    entity_id: alarm_control_panel.abode
    state: armed_away
  action:
  - service: notify.telegram
    data_template:
      message: "{{ trigger.to_state.state }} detected!"


- alias: Notify when smoke or CO cleared
  initial_state: 'on'
  trigger:
  - platform: state
    entity_id: sensor.zcombo_1_status
    from: 'Smoke'
    to: 'OK'
  - platform: state
    entity_id: sensor.zcombo_1_status
    from: 'CO'
    to: 'OK'
  condition:
    condition: state
    entity_id: alarm_control_panel.abode
    state: armed_away
  action:
  - service: notify.telegram
    data_template:
      message: "Smoke/CO no longer detected."


- alias: Notify when Zigbee device unavailable
  initial_state: 'on'
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.button_1
    - binary_sensor.button_2
    - binary_sensor.water_sensor_1
    - binary_sensor.water_sensor_2
    - sensor.lumi_temp_1
    - sensor.lumi_temp_2
    to: 'unavailable'
  action:
  - service: notify.telegram
    data_template:
      message: "{{ trigger.to_state.name }} is unavailable"


- alias: Notify when switch unavailable
  initial_state: 'on'
  trigger:
  - platform: state
    entity_id:
    - switch.washer_plug
    - switch.tuya_plug2
    - switch.plug1
    - switch.plug2
    - switch.plug3
    - switch.plug4
    - switch.light_switch1
    to: 'unavailable'
    for: '00:10:00'
  action:
  - service: notify.telegram
    data_template:
      message: "{{ trigger.to_state.name }} is unavailable"


- alias: Notify when washer done
  initial_state: 'on'
  trigger:
  - platform: state
    entity_id: input_boolean.washer
    from: 'on'
    to: 'off'
  action:
  - service: notify.telegram
    data:
      message: "Move clothes to the dryer."


- alias: Notify if space heater turned on when away
  initial_state: 'on'
  trigger:
  - platform: state
    entity_id: switch.plug4
    to: 'on'
  condition:
  - condition: state
    entity_id: alarm_control_panel.abode
    state: armed_away
  action:
  - service: notify.telegram
    data:
      message: "Space heater has been turned on."


- alias: Notify when Home Assistant starts
  trigger:
    platform: homeassistant
    event: start
  condition:
  - condition: numeric_state
    entity_id: sensor.router_uptime
    above: 0.01
  action:
  - service: input_boolean.turn_off
    entity_id: input_boolean.maintenance
  - service: notify.telegram
    data:
      message: "Home Assistant has started."
  - delay: '00:01:00'
  - service: persistent_notification.dismiss
    data:
      notification_id: config_entry_discovery


- alias: Power outage notification
  trigger:
    platform: homeassistant
    event: start
  condition:
  - condition: numeric_state
    entity_id: sensor.router_uptime
    below: 0.01
  action:
  - service: notify.telegram
    data:
      message: "Server restarted after power outage."
  - service: persistent_notification.dismiss
    data:
      notification_id: config_entry_discovery
  - service: switch.turn_off
    entity_id: switch.hdmi_0


- alias: Notify when black ink is low
  trigger:
  - platform: numeric_state
    entity_id: sensor.printer_black_ink
    below: 25
  action:
  - service: notify.telegram
    data_template:
      message: "Black ink is at {{ states('sensor.printer_black_ink') }}%."


- alias: Notify when color ink is low
  trigger:
  - platform: numeric_state
    entity_id: sensor.printer_cyan_magenta_yellow_ink
    below: 25
  action:
  - service: notify.telegram
    data_template:
      message: "Color ink is at {{ states('sensor.printer_cyan_magenta_yellow_ink') }}%."


- alias: Notify when Hue bridge is ready to update
  trigger:
  - platform: state
    entity_id: sensor.hue_bridge
    from: 'noupdates'
    to: 'readytoinstall'
  action:
  - service: notify.telegram
    data:
      message: "Hue bridge update available."


- alias: Notify when sensor battery low
  trigger:
  - platform: numeric_state
    entity_id:
    - sensor.button_1_battery
    - sensor.button_2_battery
    - sensor.lumi_weather_1_battery
    - sensor.lumi_weather_2_battery
    - sensor.water_sensor_1_battery
    - sensor.water_sensor_1_battery
    below: 21
    for: '00:10:00'
  - platform: template
    value_template: "{{ state_attr('sensor.dining_room_remote', 'battery') | float < 21 }}"
    for: '00:10:00'
  - platform: template
    value_template: "{{ state_attr('sensor.game_room_remote', 'battery') | float < 21 }}"
    for: '00:10:00'
  - platform: template
    value_template: "{{ state_attr('sensor.living_room_remote', 'battery') | float < 21 }}"
    for: '00:10:00'
  - platform: template
    value_template: "{{ state_attr('sensor.master_bedroom_remote', 'battery') | float < 21 }}"
    for: '00:10:00'
  - platform: template
    value_template: "{{ state_attr('binary_sensor.motion_sensor_motion', 'battery_level') | float < 21 }}"
    for: '00:10:00'
  - platform: template
    value_template: "{{ state_attr('binary_sensor.motion_sensor_1', 'battery_level') | float < 21 }}"
    for: '00:10:00'
  - platform: template
    value_template: "{{ state_attr('binary_sensor.front_closet', 'battery_level') | float < 21 }}"
    for: '00:10:00'
  - platform: template
    value_template: "{{ state_attr('binary_sensor.storm_door', 'battery_level') | float < 21 }}"
    for: '00:10:00'
  - platform: template
    value_template: "{{ is_state_attr('binary_sensor.drawer', 'battery_low', true) }}"
    for: '00:10:00'
  - platform: template
    value_template: "{{ is_state_attr('binary_sensor.keypad', 'battery_low', true) }}"
    for: '00:10:00'
  - platform: template
    value_template: "{{ is_state_attr('binary_sensor.front_door', 'battery_low', true) }}"
    for: '00:10:00'
  - platform: template
    value_template: "{{ is_state_attr('binary_sensor.balcony_door', 'battery_low', true) }}"
    for: '00:10:00'
  - platform: template
    value_template: "{{ is_state_attr('camera.motion_camera', 'battery_low', true) }}"
    for: '00:10:00'
  action:
  - service: notify.telegram
    data_template:
      message: "{{ trigger.to_state.name }} battery is low."