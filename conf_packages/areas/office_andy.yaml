automation:
- alias: Sync Andy's light bar with lamps
  id: 'sync-andys-light-bar-with-lamps'
  initial_state: true
  trigger:
  - platform: state
    entity_id: light.andys_office_lamps
    to:
    - 'on'
    - 'off'
  action:
  - if:
    - "{{ 'on' in trigger.to_state.state }}"
    then:
    - service: light.turn_on
      entity_id: light.andys_light_bar
      data:
        brightness_pct: 100
        effect: Random
    else:
    - service: light.turn_off
      entity_id: light.andys_light_bar


- alias: Andy's desk remote
  id: 'AeGh4fuos1theiroej4zie'
  initial_state: true
  trigger:
  - platform: state
    entity_id: sensor.andy_office_remote_action
    to: &remote_states
    # first button
    - 'on'
    - 'off'
    # second button
    - 'brightness_down'
    - 'brightness_move_down'
    - 'brightness_move_up'
    - 'brightness_up'
    # third button
    - 'colortemp_up'
    - 'colortemp_down'
    # fourth button
    - 'recall'
  action:
  - choose:
    - conditions:
      - "{{ trigger.to_state.state in ['on', 'off'] }}"
      sequence:
      - service: media_player.turn_off
        entity_id: &andy_office_speaker media_player.andy_office_speaker
    - conditions:
      - "{{ 'brightness' in trigger.to_state.state }}"
      sequence:
      - service: media_player.media_play_pause
        entity_id: *andy_office_speaker
    - conditions:
      - "{{ 'colortemp' in trigger.to_state.state }}"
      sequence:
      - service: media_player.volume_mute
        entity_id: *andy_office_speaker
    default:
    - service: light.turn_on
      entity_id: light.andys_light_bar
      data:
        brightness_pct: "{{ 0 if is_state('light.andys_light_bar', 'on') else 100 }}"
        effect: Random
    - service: light.toggle
      entity_id: light.andys_office_lamps
      data:
        brightness_pct: 100
        color_temp_kelvin: 2200


- alias: Cycle candle warmer
  id: 'cycle-andy-office-candle-warmer'
  trigger:
  - platform: time
    at: 
    - '07:00:00'
    - '16:30:00'
  - platform: state
    id: 'alarm'
    entity_id: alarm_control_panel.home
    to: 'disarmed'
  condition:
  - condition: time
    weekday: ['mon', 'tue', 'wed', 'thu', 'fri']
    after: '07:00:00'
    before: '16:30:00'
  - condition: state
    entity_id: alarm_control_panel.home
    state: 'disarmed'
  action:
  - service: "switch.turn_{{ 'on' if now().hour == 7 or trigger.id == 'alarm' else 'off' }}"
    entity_id: switch.andy_office_plug


script:
  toggle_mute_craft_room_speaker:
    sequence:
    - choose:
      - conditions:
        - condition: template
          value_template: "{{ state_attr('media_player.andy_office_speaker', 'app_name') in ['Spotify'] }}"
        sequence:
        - service: media_player.media_play_pause
          entity_id: *andy_office_speaker
      default:
      - service: media_player.volume_mute
        entity_id: *andy_office_speaker
        data:
          is_volume_muted: "{{ false if state_attr('media_player.andy_office_hub', 'is_volume_muted') else true }}"