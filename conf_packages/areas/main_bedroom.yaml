automation:
- alias: Turn bedroom lights off in morning on workday
  id: 'saoNg0IeZahlaiRuu4lahl'
  initial_state: true
  trigger:
  - platform: time
    at: '07:45:00'
  condition:
  - condition: state
    entity_id: &bedroom_lamps light.bedroom_lamps
    state: 'on'
  - condition: or
    conditions:
    - condition: template
      value_template: "{{ as_timestamp(now()) | timestamp_custom('%d') == as_timestamp(state_attr('calendar.andy_work', 'start_time')) | timestamp_custom('%d') }}"
    - condition: template
      value_template: "{{ as_timestamp(now()) | timestamp_custom('%d') == as_timestamp(state_attr('calendar.work', 'start_time')) | timestamp_custom('%d') }}"
  - condition: template
    value_template: "{{ states('input_text.alarm') in ['armed_home', 'armed_night', 'disarmed'] }}"
  action:
  - service: light.turn_off
    entity_id: *bedroom_lamps
    data:
      transition: 60


- alias: Andy button
  id: 'Sheiqueer6sheex5zie9ai'
  initial_state: true
  mode: parallel
  trigger: &andy_triggers
  - platform: state
    id: single
    entity_id: &andy_button sensor.andy_button_action
    to: 
    - 'on'
    - 'off'
  - platform: state
    id: hold
    entity_id: *andy_button
    to: 
    - 'brightness_move_up'
    - 'brightness_move_down'
  action:
    service: >
      {% if trigger.id == 'single' %}
        {% if is_state('input_boolean.andy_sleep', 'off') %}
          script.good_night_andy
        {% else %}
          script.toggle_bedroom_fan
        {% endif %}
      {% else %}
        script.good_night
      {% endif %}
    # {% if trigger.id == 'single' %}
    #   {% if is_state('input_boolean.andy_sleep', 'off') %}
    #     script.good_night_andy
    #   {% else %}
    #     script.toggle_bedroom_fan
    #   {% endif %}
    # {% else %}
    #   script.good_night{{ '_no_noise' if is_state('input_boolean.andy_sleep', 'on') else '' }}
    # {% endif %}


- alias: Matt button
  id: 'iep4tahz8sah7riet7maiJ'
  initial_state: true
  mode: parallel
  trigger: &matt_triggers
  - platform: state
    id: single
    entity_id: &matt_button sensor.matt_button_action
    to: 'single'
  - platform: state
    id: hold
    entity_id: *matt_button
    to: 'hold'
  action:
  - service: script.turn_on
    data:
      entity_id: >
        {% if trigger.id == 'single' %}
          {% if is_state('input_boolean.sleep_mode', 'off') %}
            script.good_night{{ '_no_noise' if is_state('input_boolean.andy_sleep', 'on') else '' }}
          {% else %}
            script.{{ 'toggle_bedroom_fan' if is_state('media_player.bedroom_speaker', 'playing') else 'white_noise_bedroom' }}
          {% endif %}
        {% else %}
          script.toggle_bedroom_fan
        {% endif %}


- alias: Main bedroom remote main
  id: 'tohx5be8hahLa2yaeVexai9uv'
  initial_state: true
  mode: queued
  trigger:
  - platform: state
    entity_id: sensor.main_bedroom_remote_action
    to:
    - 'on_press'
    - 'off_press'
    - 'up_press'
    - 'down_press'
  action:
  - if:
    - "{{ trigger.to_state.state == 'on_press' }}"

    # using Zigbee scenes turns the lights on at the desired color without
    # turning on at the previous color and transitioning to the new color
    then:
    - service: scene.turn_on
      entity_id: scene.bedroom_lamps_0_warm_white_100

    else:
    # when brightness up/down buttons or off button is pressed
    - service: light.turn_on
      data:
        brightness: >
          {% set hour = now().hour %}
          {% set light = states('light.bedroom_lamps') %}
          {% set trig = trigger.to_state.state %}
          {% set brt = state_attr('light.bedroom_lamps', 'brightness') | int(0) %}
          {% if trig == 'off_press' %}
            0
          {% else %}
            {% if light %}
              {% if trig == 'up_press' and brt < 231 %}
                {{ brt + 25 }}
              {% elif trig == 'down_press' and brt > 25 %}
                {{ brt - 25 }}
              {% else %}
                {{ brt }}
              {% endif %}
            {% endif %}
          {% endif %}
        entity_id: *bedroom_lamps
        transition: 0.5


- alias: Turn bedroom closet light on/off with door
  id: 'bedroom-closet-light-door'
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.main_bedroom_closet_door
    to:
    - 'on'
    - 'off'
  action:
  - service: "light.turn_{{ trigger.to_state.state }}"
    entity_id: light.main_bedroom_closet


script:
  toggle_bedroom_fan:
    sequence:
    - service: switch.toggle
      entity_id: switch.bedroom_fan

  early_departure:
    sequence:
    - service: media_player.turn_off
      entity_id:
      - media_player.bedroom_speaker
      - media_player.guest_bedroom_clock
    - service: input_boolean.turn_off
      entity_id:
      - input_boolean.sleep_mode
      - input_boolean.andy_sleep
      - input_boolean.white_noise
    - service: light.turn_on
      entity_id: 
      - light.bedroom_lamps
      - light.living_room_lamps
      - light.buffet
      data:
        transition: 30
        color_temp_kelvin: 3000
        brightness_pct: 50
    - service: light.turn_on
      entity_id: light.cabinet_lights
      data:
        brightness_pct: 66
    - service: alarm_control_panel.alarm_disarm
      entity_id: alarm_control_panel.home


shell_command:
  bedroom_powerline_leds_on: ssh -i /config/.ssh/id_rsa -o 'StrictHostKeyChecking=no' matt@10.0.5.34 /home/matt/bedroom-powerline-leds-on
  bedroom_powerline_leds_off: ssh -i /config/.ssh/id_rsa -o 'StrictHostKeyChecking=no' matt@10.0.5.34 /home/matt/bedroom-powerline-leds-off


# switch:
# - platform: template
#   switches:
#     bedroom_fan:
#       friendly_name: Bedroom fan
#       value_template: "{{ is_state('switch.main_bedroom_fan', 'on') }}"
#       turn_on:
#       - service: switch.turn_on
#         entity_id: switch.main_bedroom_fan
#       - delay: 1
#       - service: mqtt.publish
#         data:
#           topic: 'cmnd/main_bedroom_fan/tuyasend4'
#           payload: '3,3' # max speed
#       turn_off:
#         service: switch.turn_off
#         entity_id: switch.main_bedroom_fan