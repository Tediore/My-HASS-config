automation:
- alias: Toggle dark inside boolean
  description: Backup in case outdoor light sensor fails
  id: 'ainei8ohpetaa2cheLeilu'
  initial_state: true
  trigger:
  - platform: state
    entity_id: sun.sun
    to:
    - 'below_horizon'
    - 'above_horizon'
    for: &horizon_time '00:30:00'
  action:
  - service: "homeassistant.turn_{{ 'on' if trigger.to_state.state == 'below_horizon' else 'off' }}" 
    entity_id: &dark_inside input_boolean.dark_inside


- alias: Turn on sunset lights - light level
  id: 'ieb7uceicaejai0eiLaoza'
  initial_state: true
  trigger:
  - platform: numeric_state
    entity_id: &outdoor_light_east sensor.outdoor_light_level_east
    below: &outdoor_light_east_threshold 100
    for: &light_threshold_time '00:03:00'
  - platform: state
    entity_id: input_text.alarm
    from: 'armed_away'
    to: 'disarmed'
  condition:
  - condition: time
    after: '14:00:00'
  - condition: state
    entity_id: *dark_inside
    state: 'off'
  - condition: state
    entity_id: input_text.alarm
    state:
    - 'disarmed'
    - 'armed_home'
  - condition: or
    conditions:
    - condition: numeric_state
      entity_id: *outdoor_light_east
      below: *outdoor_light_east_threshold
    - condition: state
      entity_id: sun.sun
      state: 'below_horizon'
      for: *horizon_time
  action:
  - service: input_boolean.turn_on
    entity_id: *dark_inside


- alias: Turn outside lights on at night
  id: 'Coquu3eiTh5eelah5oonai'
  initial_state: true
  trigger:
  - platform: numeric_state
    entity_id: *outdoor_light_east
    below: 5
    for: '00:20:00'
  condition:
  - condition: time
    after: '16:00:00'
    before: '22:00:00'
  action:
  # tasmota rules will turn on these lights one hour after sunset if HA is down
  - service: homeassistant.turn_on
    entity_id: &outside_lights
    - switch.pole_light
    - switch.porch_light
    - switch.side_porch_light
  - service: light.turn_on
    entity_id:
    - light.garage_outside
    - light.back_side_security
    data:
      brightness_pct: 35
  - service: light.turn_on
    entity_id: light.deck
    data:
      brightness_pct: 25


# - alias: Turn outside lights off at sunrise
#   id: 'Eingaefu7veiphooph8adu'
#   initial_state: true
#   trigger:
#   - platform: sun
#     event: sunrise
#     offset: '-01:00:00'
#   action:
#   # tasmota rules will turn off the outside lights one hour before sunrise
#   # - service: homeassistant.turn_off
#   #   entity_id: *outside_lights


- alias: Turn lights back off if light level goes back up
  id: 'eeXus7ugei6eirieGhivoh'
  initial_state: true
  trigger:
  - platform: numeric_state
    entity_id: *outdoor_light_east
    above: *outdoor_light_east_threshold
    for: '00:10:00'
  condition:
  - condition: time
    after: '14:00:00'
    before: '22:00:00'
  - condition: state
    entity_id: *dark_inside
    state: 'on'
  - condition: state
    entity_id: input_text.alarm
    state:
    - 'disarmed'
    - 'armed_home'
  action:
  - service: script.turn_on
    entity_id: script.lights_sunrise


- alias: Turn dark inside boolean off in morning
  id: 'dark-inside-off-morning'
  initial_state: true
  trigger:
  - platform: numeric_state
    entity_id: &outdoor_light_west sensor.outdoor_light_level_west
    above: *outdoor_light_east_threshold
  condition:
  - condition: time
    after: '06:00:00'
    before: '14:00:00'
  - condition: state
    entity_id: *dark_inside
    state: 'on'
  - condition: state
    entity_id: input_text.alarm
    state:
    - 'disarmed'
    - 'armed_home'
  action:
  - service: input_boolean.turn_off
    entity_id: input_boolean.dark_inside


- alias: Turn lights on/off at sunset/sunrise
  id: 'eifait7ohwo4haeW9oozah'
  initial_state: true
  trigger:
  - platform: state
    entity_id: *dark_inside
    to:
    - 'on'
    - 'off'
  action:
  - service: script.turn_on
    data:
      entity_id: >
        script.{%- set alarm = states('input_text.alarm') -%}
        {%- if trigger.to_state.state == 'on' -%}
          {%- if alarm == 'armed_away' -%}
            lights_kitty
          {%- else -%}
            lights_sunset
          {%- endif -%}
        {%- else -%}
          lights_sunrise
        {%- endif -%}


- alias: Turn cabinet lights off after sunrise without motion
  id: 'cabinet-lights-off-sunrise-no-motion'
  initial_state: true
  trigger:
  - platform: template
    value_template: "{{ is_state('input_boolean.dark_inside', 'off') and is_state('binary_sensor.kitchen_motion', 'off') }}"
    for: '00:05:00'
  action:
  - service: light.turn_off
    entity_id: light.cabinet_lights_dimmer
    data:
      transition: 10


- alias: Turn interior lights off when away
  id: 'interior-lights-off-away'
  initial_state: true
  trigger:
  - platform: time
    at: '23:30:00'
  condition:
  - condition: state
    entity_id: alarm_control_panel.home
    state: 'armed_away'
  - condition: state
    entity_id: input_boolean.vacation_mode
    state: 'off'
  action:
  - delay: "{{ range(60,900) | random | int }}"
  - service: homeassistant.turn_off
    entity_id: group.lights_interior


- alias: Sync Tasmota device states on restart
  id: 'Neruw7Phaew0iuquai4eQu'
  initial_state: true
  trigger:
  - platform: homeassistant
    event: start
  action:
  - service: mqtt.publish
    data:
      topic: cmnd/tasmotas/state
      payload: ''


script:
  lights_sunset:
    sequence:
    - service: light.turn_on
      entity_id: light.cabinet_lights_dimmer
      data:
        brightness_pct: "{{ 67 if is_state('media_player.living_room_vizio', 'on') else 100 }}"
        kelvin: 2700
        transition: 10
    - service: light.turn_on
      entity_id:
      - light.buffet
      - light.entrance
      - light.hall_bath_night_light
      - light.hall_light_dimmer
      - light.main_bath_night_light
      data:
        brightness_pct: 100
        kelvin: 2700
        transition: 10
    - service: script.turn_on
      entity_id: script.lr_lights_sunset
    - if:
      - condition: state
        entity_id: media_player.living_room_vizio
        state: 'off'
      - condition: state
        entity_id: light.christmas_tree
        state: 'unavailable'
      then:
      - service: light.turn_on
        data:
          entity_id: light.living_room_buffet
          brightness_pct: 100
          kelvin: 2700
          transition: 10
    - if:
      - &is_christmas "{{ not is_state('light.christmas_tree', 'unavailable') }}"
      then:
      - service: light.turn_on
        entity_id: &christmas_lights light.christmas_lights
        data:
          brightness_pct: 100


  lr_lights_sunset:
    sequence:
    - if:
      - condition: state
        entity_id: media_player.living_room_vizio
        state: 'on'
      then:
      - service: light.turn_on
        entity_id: light.living_room_bias_lighting
        data:
          brightness_pct: 100
          kelvin: 5000
          transition: 10
      else:
      - wait_template: "{{ states('sensor.outdoor_light_level_east') | int(0) < 25 }}"
        timeout: "00:20:00"
        continue_on_timeout: true
      - condition: template
        value_template: "{{ states('input_text.alarm') in ['armed_home', 'disarmed'] }}"
      - condition: state
        entity_id: media_player.living_room_vizio
        state: 'off'
      - service: light.turn_on
        data:
          entity_id: light.living_room_lamps
          brightness_pct: 100
          kelvin: 2700
          transition: 10
  
  lights_sunrise:
    sequence:
    - service: input_boolean.turn_off
      entity_id: *dark_inside
    - service: light.turn_off
      entity_id: 
      - light.buffet
      - light.living_room_buffet
      - light.entrance
      - light.hall_light_dimmer
      data:
        transition: 10
    - delay: '00:00:10'
    - service: light.turn_off
      entity_id: 
      - light.hall_bath_night_light
      - light.main_bath_night_light
      data:
        transition: 1
    - if:
      - *is_christmas
      then:
      - service: light.turn_off
        entity_id: *christmas_lights

  brightness_preset:
    sequence:
    - service: mqtt.publish
      data:
        topic: "cmnd/{{ device }}/dimmer"
        payload: "{{ brightness_pct }}"

  main_floor_lights_off:
    sequence:
    - service: scene.create
      data:
        scene_id: main_floor_lights
        snapshot_entities: &main_floor_lights
        # - light.buffet
        # - light.entrance
        # - light.hall_light_dimmer
        - light.hall_bath_night_light
        - light.cabinet_lights_dimmer
        - light.living_room_lamps
        - light.main_bath_night_light
        - light.living_room_buffet
    - service: light.turn_off
      entity_id: *main_floor_lights
    - service: input_boolean.turn_on
      entity_id: input_boolean.main_floor_lights_off


light:
- platform: group
  name: Christmas lights
  entities:
  - light.christmas_tree
  - light.mini_christmas_tree
  - light.portable_mini_christmas_tree
  - light.star_lights


input_boolean:
  dark_inside:
  overnight_guest:
  main_floor_lights_off: