automation:
- alias: Notify when Home Assistant starts
  id: 'yo9Ju1Au6daePhaH'
  trigger:
    platform: homeassistant
    event: start
  action:
  - service: notify.gotify
    data:
      message: "Home Assistant started"
  - wait_template: "{{ is_state('persistent_notification.config_entry_discovery', 'notifying') }}"
    timeout: "00:01:00"
    continue_on_timeout: false
  - service: persistent_notification.dismiss
    data:
      notification_id: config_entry_discovery


- alias: Dismiss discovery notification
  id: 'mieGhe9xai9lieco'
  initial_state: true
  trigger:
    platform: state
    entity_id: persistent_notification.config_entry_discovery
    to: 'notifying'
  action:
    service: persistent_notification.dismiss
    data:
      notification_id: config_entry_discovery


- alias: Record internet outage
  id: 'WooWir8etaithoaz'
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.internet
    from: 
    - 'on'
    - 'off'
    to: 
    - 'off'
    - 'on'
    for: '00:00:40'
  action:
  - service: "input_boolean.turn_{{ trigger.to_state.state }}"
    entity_id: input_boolean.internet


- alias: Notify when switching to/from failover WAN
  id: 'notify-switch-failover-wan'
  initial_state: true
  trigger:
  - platform: state
    entity_id: sensor.active_internet_connection
    to:
    - 'Primary'
    - 'Secondary'
  action:
  - service: notify.gotify_high
    data:
      title: Internet connection
      message: "{{ trigger.to_state.state }} connection active."


- alias: Notify when internet connection out/restored
  id: 'notify-internet-out-restored'
  initial_state: true
  trigger:
  - platform: state
    entity_id: input_boolean.internet
    to:
    - 'on'
    - 'off'
  action:
  - service: notify.lte_modem
    data:
      target: !secret phone_matt
      message: "Internet connection {{ 'lost' if trigger.to_state.state == 'off' else 'restored' }}."


- alias: Notify when camera offline/online
  id: 'notify-camera-offline-online'
  initial_state: true
  mode: parallel
  trigger:
  - platform: state
    entity_id: &cameras
    - camera.alley
    - camera.dungeon    
    - camera.front_door
    - camera.garage    
    - camera.patio
    - camera.rear_doorbell
    to: 'unavailable'
    for: '00:01:00'
    id: 'offline'
  - platform: state
    entity_id: *cameras
    to: 'recording'
    id: 'online'
  action:
  - service: notify.gotify_high
    data:
      title: "Camera {{ trigger.id }}"
      message: "{{ trigger.to_state.name }} camera is {{ 'back ' if trigger.id == 'online' }}{{ trigger.id }}."


rest:
- resource: !secret ipinfo_url
  scan_interval: 54
  sensor:
  - name: ISP
    value_template: "{{ value_json['org'] }}"
  - name: WAN IP address
    value_template: "{{ value_json['ip'] }}"


template:
- sensor:
  - name: Active internet connection
    state: "{{ 'Secondary' if ('Comcast' not in states('sensor.isp') and states('sensor.isp') not in ['unavailable', 'unknown']) else 'Primary' }}"


input_boolean:
  internet: