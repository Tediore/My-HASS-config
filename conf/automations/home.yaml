- alias: Toggle dark inside boolean
  initial_state: true
  trigger:
  - platform: template  # True when dark inside
    value_template: >
      {% set elev = state_attr('sun.sun', 'elevation') | float %}
      {% set elev_cloudy = states('input_number.dark_inside_cloudy') | float %}
      {% set elev_sunny = states('input_number.dark_inside_not_cloudy') | float %}
      {{ (states('weather.dark_sky') in ['overcast'] and elev < elev_cloudy) or (states('weather.dark_sky') not in ['overcast'] and elev < elev_sunny) }}
  - platform: template  # True when not dark inside
    value_template: >
      {% set elev = state_attr('sun.sun', 'elevation') | float %}
      {% set elev_cloudy = states('input_number.dark_inside_cloudy') | float %}
      {% set elev_sunny = states('input_number.dark_inside_not_cloudy') | float %}
      {{ not (states('weather.dark_sky') in ['overcast'] and elev < elev_cloudy) and not (states('weather.dark_sky') not in ['overcast'] and elev < elev_sunny) }}
  action:
    service_template: >
      {% set elev = state_attr('sun.sun', 'elevation') | float %}
      {% set elev_cloudy = states('input_number.dark_inside_cloudy') | float %}
      {% set elev_sunny = states('input_number.dark_inside_not_cloudy') | float %}
      input_boolean.turn_{{ 'on' if (states('weather.dark_sky') in ['overcast'] and elev < elev_cloudy) or (states('weather.dark_sky') not in ['overcast'] and elev < elev_sunny) else 'off' }}
    entity_id: input_boolean.dark_inside


- alias: Turn lights on/off at sunset/sunrise if home
  initial_state: true
  trigger:
  - platform: state
    entity_id: input_boolean.dark_inside
  - platform: event
    event_type: hue_event
    event_data:
      id: 'dining_room_remote'
      event: 2002
  condition:
  - condition: template
    value_template: "{{ states('alarm_control_panel.abode') in ['armed_home', 'disarmed'] }}"
  action:
  - service_template: "script.lights_{{ 'sunset' if trigger.platform == 'event' or trigger.to_state.state == 'on' else 'sunrise' }}"


- alias: Turn porch light off at sunrise
  initial_state: true
  trigger:
  - platform: sun
    event: sunrise
    offset: '-01:30:00'
  action:
  - service: light.turn_off
    entity_id: light.porch_light


- alias: Turn on holiday porch light
  initial_state: true
  trigger:
  - platform: state
    entity_id: sun.sun
    to: 'below_horizon'
    for: '00:20:00'
  condition:
    - condition: template
      value_template: "{{ is_state('input_boolean.valentines_day', 'on') or is_state('input_boolean.autism_awareness', 'on') or is_state('input_boolean.halloween', 'on') or is_state('input_boolean.christmas', 'on') }}"
  action:
  - service: script.holiday_porch_light


- alias: Turn porch light white when door opened
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.balcony_door
    to: 'on'
  - platform: state
    entity_id: sun.sun
    to: 'below_horizon'
  condition:
  - condition: state
    entity_id: binary_sensor.balcony_door
    state: 'on'
  - condition: state
    entity_id: sun.sun
    state: 'below_horizon'
  - condition: state
    entity_id: input_boolean.on_balcony
    state: 'off'
  - condition: template
    value_template: "{{ trigger.to_state.state != trigger.from_state.state }}"
  action:
  - service: scene.create
    data:
      scene_id: before_balcony_opened
      snapshot_entities:
      - light.porch_light
  - service: light.turn_on
    entity_id: light.porch_light
    data:
      kelvin: 4000
      brightness_pct: 100
      transition: 5


- alias: Restore porch light color when door closed
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.balcony_door
    from: 'on'
    to: 'off'
    for: '00:00:10'
  condition:
  - condition: state
    entity_id: sun.sun
    state: 'below_horizon'
  - condition: state
    entity_id: input_boolean.on_balcony
    state: 'off'
  - condition: template
    value_template: "{{ states('input_text.porch_light_xy_color') != None }}"
  action:
  - service: scene.turn_on
    entity_id: scene.before_balcony_opened
    data:
      transition: 2


- alias: Toggle record when on balcony
  initial_state: true
  trigger:
  - platform: state
    entity_id: light.porch_light
  condition:
  - condition: state
    entity_id: sun.sun
    state: 'below_horizon'
  - condition: template
    value_template: "{{ trigger.to_state.state != 'unavailable' }}"
  action:
  - service_template: "homeassistant.turn_{{ trigger.to_state.state }}"
    entity_id: 
    - automation.record_when_on_balcony
    - input_boolean.on_balcony_auto
  - condition: template
    value_template: "{{ trigger.to_state.state == 'off' }}"
  - service: input_boolean.turn_off
    entity_id:
    - input_boolean.on_balcony_auto
    - input_boolean.on_balcony_init0
    - input_boolean.on_balcony_init1
    - input_boolean.on_balcony_init2
    - input_boolean.on_balcony


- alias: Record when on balcony
  trigger:
  - platform: state
    entity_id: binary_sensor.storm_door
  - platform: state
    entity_id: binary_sensor.balcony_door
    from: 'off'
    to: 'on'
    for: '00:00:01'
  - platform: state
    entity_id: binary_sensor.balcony_door
    from: 'on'
    to: 'off'
  - platform: state
    entity_id:
    - input_boolean.on_balcony_init1
    - input_boolean.on_balcony_init2
    - input_boolean.on_balcony
    to: 'on'
  action:
  - service: input_boolean.turn_on
    data_template:
      entity_id: >
        {% set tstate = trigger.to_state.state %}
        {% set entity = trigger.to_state.entity_id.replace('binary_sensor.', '').replace('_door', '').replace('', '').replace('input_boolean.', '') %} 
        {% set balcony = states('binary_sensor.balcony_door') %}
        {% set storm = states('binary_sensor.storm_door') %}
        {% if entity == 'balcony' and tstate == 'on' and storm == 'off' %}
          input_boolean.on_balcony_init0
        {% elif entity == 'storm' and tstate == 'on' and is_state('input_boolean.on_balcony_init0', 'on') %}
          input_boolean.on_balcony_init1
        {% elif entity == 'balcony' and tstate == 'off' and is_state('input_boolean.on_balcony_init1', 'on') %}
          input_boolean.on_balcony_init2
        {% elif entity == 'storm' and tstate == 'off' and is_state('input_boolean.on_balcony_init2', 'on') %}
          input_boolean.on_balcony
        {% else %}
          none
        {% endif %}
  - service: input_boolean.turn_off
    data_template:
      entity_id: >
        {% set entity = trigger.to_state.entity_id.replace('binary_sensor.', '').replace('_door', '').replace('', '').replace('input_boolean.', '') %}
        {% set tstate = trigger.to_state.state %}
        {% if entity == 'on_balcony_init1' %}
          input_boolean.on_balcony_init0
        {% elif entity == 'on_balcony_init2' %}
          input_boolean.on_balcony_init1
        {% elif entity == 'on_balcony' %}
          input_boolean.on_balcony_init2
        {% elif entity == 'balcony' and tstate == 'on' and is_state('input_boolean.on_balcony', 'on') %}
          input_boolean.on_balcony
        {% else %}
          none
        {% endif %}


- alias: HVAC closet door opened/closed
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.hvac_closet
  condition:
  - condition: state
    entity_id: input_boolean.sleep_mode
    state: 'off'
  - condition: state
    entity_id: input_boolean.andy_sleep
    state: 'off'
  action:
  - service: light.turn_on
    entity_id: light.laundry_room
    data_template:
      brightness_pct: "{{ 100 if trigger.to_state.state == 'on' else 0 }}"
      kelvin: 4000
  - service_template: "switch.turn_{{ 'on' if trigger.to_state.state == 'off' else 'off' }}"
    entity_id: switch.hue_motion_sensor_1


- alias: Turn guest bath fan off after 60 minutes
  initial_state: true
  trigger:
  - platform: state
    entity_id: switch.guest_bath_fan
    from: 'off'
    to: 'on'
    for: '01:00:00'
  action:
  - service: switch.turn_off
    entity_id: switch.guest_bath_fan