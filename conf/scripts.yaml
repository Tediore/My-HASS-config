tts_living_room:
  sequence:
  - service: media_player.volume_mute
    entity_id: media_player.living_room_speaker
    data:
      is_volume_muted: true
  - service: media_player.turn_on
    entity_id: media_player.living_room_speaker
  - wait_template: "{{ is_state('media_player.living_room_speaker', 'idle') }}"
    timeout: '00:00:20'
    continue_on_timeout: true
  - delay: '00:00:01'
  - service: media_player.volume_mute
    entity_id: media_player.living_room_speaker
    data:
      is_volume_muted: false
  - service: tts.google
    entity_id: media_player.living_room_speaker
    data_template:
      message: "{{ message }}"
  - wait_template: "{{ is_state('media_player.living_room_speaker', 'playing') }}"
    timeout: '00:00:10'
    continue_on_timeout: true
  - wait_template: "{{ is_state('media_player.living_room_speaker', 'idle') }}"
    timeout: '00:00:10'
    continue_on_timeout: true
  - service: media_player.turn_off
    entity_id: media_player.living_room_speaker


hass_online:
  sequence:
  - service: notify.gotify
    data_template:
      title: "Home Assistant started"
      message: >
        {{ 
        [
        "System online.",
        "The system is (not) down.",
        "Don't have too much fun.",
        "Be careful with that!",
        "At your service.",
        "Don't say I never did nothing for ya.",
        "FATAL ERROR: Just kidding.",
        "You might need to restart one more time.",
        "Once more, with feeling!",
        "How many times are you gonna do that today?"
        ] | random }}

ir_fan_power:
  sequence:
  - service: mqtt.publish
    data_template:
      topic: &ir_topic "cmnd/{{ blaster }}/irsend"
      payload: '{"Protocol":"SYMPHONY","Bits":12,"Data":"0xD81"}'

ir_fan_speed:
  sequence:
  - service: mqtt.publish
    data_template:
      topic: *ir_topic
      payload: '{"Protocol":"SYMPHONY","Bits":12,"Data":"0xD88"}'

ir_soundbar_vol_up:
  sequence:
  - service: mqtt.publish
    data_template:
      topic: &lr_ir_topic "cmnd/living_room_ir/irsend"
      payload: '{"Protocol":"NEC","Bits":32,"Data":"0x00FF827D"}'

ir_soundbar_vol_dn:
  sequence:
  - service: mqtt.publish
    data_template:
      topic: *lr_ir_topic
      payload: '{"Protocol":"NEC","Bits":32,"Data":"0x00FFA25D"}'

entry_exit_beep:
  sequence:
    repeat:
      while:
      - condition: state
        entity_id: input_boolean.test
        state: 'on'
      sequence:
      - service: mqtt.publish
        data:
          topic: 'cmnd/rf_bridge/backlog'
          payload: "rfraw aac0006455"
      - delay: 1