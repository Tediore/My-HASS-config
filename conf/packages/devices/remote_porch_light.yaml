automation:
- alias: Porch light remote
  initial_state: true
  mode: parallel
  trigger:
  - platform: mqtt
    topic: zigbee2mqtt/Porch light remote/click
    # first button: toggle light
    # second button: change light color
    # third button: return to 4000K @ 50% brightness
  action:
  - service_template: >
      {% set command = trigger.payload %}
      {% if command == 'power' %}
        script.porch_light_{{ 'on' if is_state('light.porch', 'off') else 'off' }}
      {% elif command == 'brightness' %}
        script.porch_light_color
      {% else %}
        script.porch_light_security
      {% endif %}

- alias: Reset porch light input to white
  initial_state: true
  trigger:
  - platform: state
    entity_id: light.porch
    from: 'on'
    to: 'off'
  action:
  - service: input_text.set_value
    entity_id: input_text.porch_light_color
    data:
      value: 'white'


input_text:
  porch_light_color:


script:
  porch_light_on:
    sequence:
    - service: light.turn_on
      entity_id: light.porch
      data:
        brightness_pct: 100
        kelvin: 4000
    - service: input_text.set_value
      entity_id: input_text.porch_light_color
      data:
        value: 'white'

  porch_light_off:
    sequence:
    - service: light.turn_off
      entity_id: light.porch

  porch_light_color:
    sequence:
    - service: light.turn_on
      entity_id: light.porch
      data_template:
        transition: 0.5
        brightness_pct: 100
        color_name: &color >
          {% set color = states('input_text.porch_light_color') %}
          {% set dict = {
            'white': 'red',
            'red': 'orange',
            'orange': 'green',
            'green': 'cyan',
            'cyan': 'blue',
            'blue': 'darkslateblue',
            'darkslateblue': 'white'
          } %}
          {{ dict[color] }}
    - service: input_text.set_value
      entity_id: input_text.porch_light_color
      data_template:
        value: *color