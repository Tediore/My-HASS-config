automation:
- alias: Toggle dark inside boolean
  initial_state: true
  trigger:
  - platform: template  # True when dark inside
    value_template: >
      {% set elev = state_attr('sun.sun', 'elevation') | float %}
      {% set elev_cloudy = states('input_number.dark_inside_cloudy') | float %}
      {% set elev_sunny = states('input_number.dark_inside_not_cloudy') | float %}
      {{ (states('weather.dark_sky') in ['overcast'] and elev < elev_cloudy) or (states('weather.dark_sky') not in ['overcast'] and elev < elev_sunny) }}
  - platform: template  # True when not dark inside
    value_template: >
      {% set elev = state_attr('sun.sun', 'elevation') | float %}
      {% set elev_cloudy = states('input_number.dark_inside_cloudy') | float %}
      {% set elev_sunny = states('input_number.dark_inside_not_cloudy') | float %}
      {{ not (states('weather.dark_sky') in ['overcast'] and elev < elev_cloudy) and not (states('weather.dark_sky') not in ['overcast'] and elev < elev_sunny) }}
  action:
    service_template: >
      {% set elev = state_attr('sun.sun', 'elevation') | float %}
      {% set elev_cloudy = states('input_number.dark_inside_cloudy') | float %}
      {% set elev_sunny = states('input_number.dark_inside_not_cloudy') | float %}
      homeassistant.turn_{{ 'on' if (states('weather.dark_sky') in ['overcast'] and elev < elev_cloudy) or (states('weather.dark_sky') not in ['overcast'] and elev < elev_sunny) else 'off' }}
    entity_id:
    - input_boolean.dark_inside
    - switch.hue_dark_inside


- alias: Turn on sunset lights - light level
  initial_state: true
  trigger:
  - platform: numeric_state
    entity_id: sensor.kitchen_light_level
    below: &threshold 10
    for: '00:01:00'
  - platform: time
    at: '15:30:00'
  condition:
  - condition: state
    entity_id: alarm_control_panel.abode
    state:
    - 'disarmed'
    - 'armed_home'
  - condition: time
    after: '15:30:00'
    before: '21:30:00'
  - condition: numeric_state
    entity_id: sensor.kitchen_light_level
    below: *threshold
  action:
  - service: script.turn_on
    entity_id: script.lights_sunset


- alias: Dim cabinet and buffet lights at night
  initial_state: true
  trigger:
  - platform: time
    at: &time '21:00:00'
  - platform: homeassistant
    event: start
  condition:
  - condition: or
    conditions:
    - condition: state
      entity_id: light.kitchen_cabinets
      state: 'on'
    - condition: state
      entity_id: light.buffet
      state: 'on'
  - condition: time
    after: *time
  action:
  - service: light.turn_on
    data:
      entity_id: >
        {% set cabinets = states('light.kitchen_cabinets') %}
        {% set buffet = states('light.buffet') %}
        {% if cabinets == 'on' and buffet == 'on' %}
          light.kitchen_cabinets, light.buffet
        {% elif cabinets == 'on' %}
          light.kitchen_cabinets
        {% else %}
          light.buffet
        {% endif %}
      brightness_pct: 66
      transition: 10


- alias: Turn lights on/off at sunset/sunrise if home
  initial_state: true
  trigger:
  - platform: state
    entity_id: input_boolean.dark_inside
  - platform: device
    device_id: 55b0121107f211ebb27d373eedc421d7
    domain: homekit_controller
    type: button2
    subtype: single_press
  condition:
  - condition: template
    value_template: "{{ states('alarm_control_panel.abode') in ['armed_home', 'disarmed'] }}"
  action:
  - service_template: "script.lights_{{ 'sunset' if trigger.platform == 'device' or trigger.to_state.state == 'on' else 'sunrise' }}"


- alias: Turn porch light off at sunrise
  initial_state: true
  trigger:
  - platform: sun
    event: sunrise
    offset: '-01:30:00'
  action:
  - service: light.turn_off
    entity_id: light.porch_light
  - condition: state
    entity_id: input_boolean.christmas
    state: 'on'
  - service: switch.turn_off
    entity_id: switch.christmas_lights


- alias: Turn porch light white when door opened
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.balcony_door
    to: 'on'
  - platform: state
    entity_id: sun.sun
    to: 'below_horizon'
  condition:
  - condition: state
    entity_id: binary_sensor.balcony_door
    state: 'on'
  - condition: state
    entity_id: sun.sun
    state: 'below_horizon'
  - condition: state
    entity_id: input_boolean.on_balcony
    state: 'off'
  - condition: template
    value_template: "{{ trigger.to_state.state != trigger.from_state.state }}"
  action:
  - service: scene.create
    data:
      scene_id: before_balcony_opened
      snapshot_entities:
      - light.porch_light
  - service: light.turn_on
    entity_id: light.porch_light
    data:
      kelvin: 4000
      brightness_pct: 100
      transition: 5


- alias: Restore porch light color when door closed
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.balcony_door
    from: 'on'
    to: 'off'
    for: '00:00:10'
  condition:
  - condition: state
    entity_id: sun.sun
    state: 'below_horizon'
  - condition: state
    entity_id: input_boolean.on_balcony
    state: 'off'
  - condition: template
    value_template: "{{ states('input_text.porch_light_xy_color') != None }}"
  action:
  - service: scene.turn_on
    entity_id: scene.before_balcony_opened
    data:
      transition: 2


- alias: HVAC closet door opened/closed
  initial_state: true
  mode: parallel
  trigger:
  - platform: state
    entity_id: binary_sensor.hvac_closet
    to:
    - 'on'
    - 'off'
  condition:
  - condition: state
    entity_id: input_boolean.sleep_mode
    state: 'off'
  - condition: state
    entity_id: input_boolean.andy_sleep
    state: 'off'
  action:
  - service: light.turn_on
    entity_id: light.laundry_room
    data_template:
      brightness_pct: "{{ 100 if trigger.to_state.state == 'on' else 0 }}"
      kelvin: 4000
  - service_template: "switch.turn_{{ 'on' if trigger.to_state.state == 'off' else 'off' }}"
    entity_id: switch.laundry_room_motion_sensor


- alias: Toggle buffet light with dining room lights
  initial_state: true
  trigger:
  - platform: state
    entity_id: light.dining_room
  condition:
  - condition: state
    entity_id: input_boolean.dark_inside
    state: 'on'
  - condition: template
    value_template: "{{ states('alarm_control_panel.abode') in ['armed_home', 'disarmed'] }}"
  action:
  - service_template: "light.turn_{{ 'on' if trigger.to_state.state == 'off' else 'off' }}"
    entity_id: light.buffet


- alias: Turn on/off hall bath night light with motion
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.hall_bath_motion
    from: 'off'
    to: 'on'
  - platform: state
    entity_id: binary_sensor.hall_bath_motion
    from: 'on'
    to: 'off'
    for: '00:10:00'
  condition:
  - condition: state
    entity_id: input_boolean.dark_inside
    state: 'on'
  - condition: template
    value_template: "{{ states('alarm_control_panel.abode') in ['armed_home', 'disarmed'] }}"
  action:
  - service: light.turn_on
    entity_id: light.hall_bath_night_light
    data:
      brightness_pct: "{{ 100 if trigger.to_state.state == 'on' else 34 }}"


- alias: Turn porch light on/off with motion
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.balcony_motion
    to: 'on'
  condition:
  - condition: state
    entity_id: sun.sun
    state: 'below_horizon'
    for: '00:30:00'
  - condition: not
    conditions:
    - condition: state
      entity_id: binary_sensor.balcony_door
      state: 'on'
  action:
  - service: scene.create
    data:
      scene_id: before_porch_light
      snapshot_entities:
      - light.porch_light
  - service: light.turn_on
    entity_id: light.porch_light
    data:
      brightness_pct: 100
      kelvin: 4000
  - wait_template: "{{ is_state('binary_sensor.balcony_motion', 'off') }}"
    timeout: '00:05:00'
    continue_on_timeout: true
  - scene: scene.before_porch_light


input_boolean:
  dark_inside:


script:
  lights_sunset:
    sequence:
    - service: script.turn_on
      entity_id: 
      - script.wait_dining_room_lights_off
      - script.christmas_tree_on
    - service: light.turn_on
      entity_id: light.kitchen_cabinets
      data:
        brightness_pct: 100
    - service: light.turn_on
      entity_id: light.hall_bath_night_light
      data:
        brightness_pct: 34
    - condition: state
      entity_id: media_player.living_room_vizio
      state: 'on'
    - service: light.turn_on
      entity_id: light.living_room_bias_lighting
      data:
        brightness_pct: 100
        kelvin: 5000
        transition: 10
  
  lights_sunrise:
    sequence:
    - service: light.turn_off
      entity_id: 
      - light.buffet
      - light.hall_bath_night_light
      data:
        transition: 30
    - delay: '00:00:30'
    - service: light.turn_off
      entity_id: light.kitchen_cabinets
    - service: input_boolean.turn_off
      entity_id:
      - input_boolean.on_balcony_init0
      - input_boolean.on_balcony_init1
      - input_boolean.on_balcony_init2
      - input_boolean.on_balcony
    - condition: state
      entity_id: input_boolean.christmas
      state: 'on'
    - service: switch.turn_off
      entity_id: switch.christmas_tree

  wait_dining_room_lights_off:
    sequence:
    - wait_template: "{{ is_state('light.dining_room', 'off') }}"
      timeout: '08:00:00'
      continue_on_timeout: false
    - service: light.turn_on
      entity_id: light.buffet
      data_template:
        kelvin: 3000
        transition: 10
        brightness_pct: "{{ 100 if is_state('media_player.living_room_vizio', 'off') else 50 }}"

  christmas_tree_on:
    sequence:
    - condition: state
      entity_id: input_boolean.christmas
      state: 'on'
    - service: switch.turn_on
      entity_id: switch.christmas_tree