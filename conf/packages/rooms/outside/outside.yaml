automation:
- alias: Turn outside lights on at night
  id: 'Coquu3eiTh5eelah5oonai'
  initial_state: true
  trigger:
  - platform: numeric_state
    entity_id: &outdoor_light sensor.outdoor_light_level
    below: &outdoor_light_threshold 5
    for: '00:20:00'
  action:
  # tasmota rules will turn on these lights one hour after sunset if HA is down
  - service: homeassistant.turn_on
    entity_id: &outside_lights
    - switch.pole_light
    - switch.porch_light
    - switch.side_porch_light
  - service: light.turn_on
    entity_id:
    - light.garage_outside
    - light.back_side_security
    data:
      brightness_pct: 35
  - service: light.turn_on
    entity_id: light.deck
    data:
      brightness_pct: 25


- alias: Turn outside lights off at sunrise
  id: 'Eingaefu7veiphooph8adu'
  initial_state: true
  trigger:
  - platform: sun
    event: sunrise
    offset: '-01:00:00'
  action:
  # tasmota rules will turn off the outside lights one hour before sunrise
  # - service: homeassistant.turn_off
  #   entity_id: *outside_lights
  - condition: state
    entity_id: input_boolean.christmas
    state: 'on'
  - service: light.turn_off
    entity_id: light.christmas_lights


- alias: Notify when object detected on camera and change security lights
  id: 'uYohr6ooch2thazahquoo0mo'
  initial_state: true
  trigger:
  - platform: mqtt
    topic: frigate/events
  condition:
  - condition: state
    entity_id: input_boolean.dark_inside
    state: 'on'
  - condition: time
    after: '19:30:00'
  - condition: template
    value_template: >
      {% set camera = trigger.payload_json["after"]["camera"].lower().replace('_','') %}
      {{ camera in ['south wall', 'backyard', 'deck', 'garage side'] }}
  action:
  - service: script.turn_on
    entity_id: script.security_lights_up
    data:
      scene_id: &light >
        {% set camera = trigger.payload_json["after"]["camera"].lower() %}
        {% set dict = {
          'backyard': 'back_side_security',
          'deck': 'deck',
          'garage_side': 'garage_outside',
          'south_wall': 'back_side_security'
        } %}
        {{ dict[camera] }}
      light: *light
  - service: notify.mobile_app_matt_phone
    data:
      title: "{{ trigger.payload_json['after']['label'].title() }} detected"
      message: >
        {% set camera = trigger.payload_json["after"]["camera"].replace('Garage_side', 'garage side door').replace('_',' ').lower() %}
        {% set object = trigger.payload_json["after"]["label"] %}
        {% if 'yard' in camera %}
          {% set wording = 'in' %}
        {% elif 'door' in camera or 'side' in camera %}
          {% set wording = 'at' %}
        {% else %}
          {% set wording = 'on' %}
        {% endif %}
        A {{ object }} was detected {{ wording }} the {{ location }}.
      data:
        image: &secret frigate_url
        tag: '{{trigger.payload_json["after"]["id"]}}'
        when: '{{trigger.payload_json["after"]["start_time"]|int}}'


- alias: Return security lights to previous state
  id: 'Oojoh5neicahS7ahNgiogh5x'
  initial_state: true
  trigger:
  - platform: state
    entity_id:
    - input_boolean.back_side_security
    - input_boolean.deck
    - input_boolean.garage_outside
    - input_boolean.south_wall
    to: 'on'
    for: '00:05:00'
  action:
  - service: scene.turn_on
    data:
      entity_id: "scene.{{ trigger.to_state.object_id }}"
  - service: input_boolean.turn_off
    data:
      entity_id: "input_boolean.{{ trigger.to_state.object_id }}"


script:
  security_lights_up:
    sequence:
    - service: scene.create
      data:
        scene_id: "{{ scene_id }}"
        snapshot_entities: "light.{{ light }}"
    - service: light.turn_on
      data:
        entity_id: "light.{{ light }}"
        brightness_pct: 100
    - service: input_boolean.turn_on
      data:
        entity_id: "input_boolean.{{ light }}"


input_boolean:
  back_side_security:
  deck:
  garage_outside:
  south_wall: