automation:
- alias: Turn bedroom lights off in morning on workday
  id: 'saoNg0IeZahlaiRuu4lahl'
  initial_state: true
  trigger:
  - platform: time
    at: '07:45:00'
  condition:
  - condition: state
    entity_id: light.master_bedroom_lamps
    state: 'on'
  - condition: or
    conditions:
    - condition: template
      value_template: "{{ as_timestamp(now()) | timestamp_custom('%d') == as_timestamp(state_attr('calendar.andy_work', 'start_time')) | timestamp_custom('%d') }}"
    - condition: template
      value_template: "{{ as_timestamp(now()) | timestamp_custom('%d') == as_timestamp(state_attr('calendar.work', 'start_time')) | timestamp_custom('%d') }}"
  - condition: template
    value_template: "{{ states('input_text.alarm') in ['armed_home', 'disarmed'] }}"
  action:
  - service: light.turn_off
    entity_id: light.master_bedroom_lamps
    data:
      transition: 60


- alias: Transition master bedroom lights to warm
  id: 'EitaeNg7et5ogh2Ahph2Ae'
  initial_state: true
  trigger:
  - platform: state
    entity_id: input_boolean.dark_inside
    from: 'off'
    to: 'on'
  condition:
  - condition: state
    entity_id: light.matt
    state: 'on'
  action:
  - service: light.turn_on
    entity_id: light.master_bedroom_lamps
    data:
      transition: 40
      kelvin: 3000


- alias: Turn mini Christmas tree on
  id: 'Voh7tieRoh6jahthuojeit'
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.master_bedroom_motion
    to: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.dark_inside
    state: 'on'
  - condition: state
    entity_id: input_boolean.andy_sleep
    state: 'off'
  - "{{ now().month in [11, 12, 1, 2] }}"
  action:
  - service: light.turn_on
    entity_id: light.mini_christmas_tree


- alias: Turn mini Christmas tree off
  id: 'futok5uwu2paaMaigh7ied'
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.master_bedroom_motion
    to: 'off'
    for: '00:05:00'
  - platform: state
    entity_id: light.matt
    from: 'on'
    to: 'off'
  condition:
  - condition: state
    entity_id: light.matt
    state: 'off'
  action:
  - service: light.turn_off
    entity_id: light.mini_christmas_tree


- alias: Turn generic tstats on with buttons on plugs
  id: 'Yee7shiv2isheilu8fahhi'
  initial_state: true
  trigger:
  - platform: mqtt
    topic: stat/master_bedroom_ac/power
    id: bedroom_ac
  - platform: mqtt
    topic: stat/box_fan/power
    id: box_fan
  action:
  - service: "climate.turn_{{ 'on' if is_state('climate.' + trigger.id, 'off') else 'off' }}"
    data:
      entity_id: "climate.{{ trigger.id }}"


- alias: Turn closet lights on/off with doors
  id: 'ahchooGeoph0ab6IiceuSh'
  initial_state: true
  mode: parallel
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.andy_closet_door
    - binary_sensor.matt_closet_door
    to:
    - 'on'
    - 'off'
  action:
  - service: light.turn_on
    data:
      entity_id: "light.{{ trigger.to_state.object_id.replace('_door','') }}"
      brightness_pct: "{{ 67 if (trigger.to_state.state == 'on' and is_state('input_boolean.dark_inside', 'on')) else 0 }}"
      transition: 0.4


- alias: Matt button - normal
  id: 'iep4tahz8sah7riet7maiJ'
  initial_state: true
  mode: parallel
  trigger:
  - platform: state
    entity_id: sensor.button_matt
    to:
    - 'single'
    - 'double'
    - 'hold'
  condition:
  - condition: state
    entity_id: &bsmt_bed input_boolean.basement_bedroom
    state: 'off'
  action:
  - service: script.turn_on
    data_template:
      entity_id: >
        {% set command = trigger.to_state.state %}
        {% if command == 'single' %}
          {% if is_state('input_boolean.sleep_mode', 'off') %}
            script.good_night{{ '_no_noise' if is_state('input_boolean.andy_sleep', 'on') else '' }}
          {% else %}
            script.{{ 'toggle_bedroom_fan' if is_state('media_player.master_bedroom_clock', 'playing') else 'white_noise_bedroom' }}
          {% endif %}
        {% elif command == 'hold' %}
          script.toggle_bedroom_fan
        {% else %}
          script.early_departure
        {% endif %}


- alias: Matt button - basement bedroom
  id: 'joChuvuazoomee4ohqu8engu'
  initial_state: true
  mode: parallel
  trigger:
  - platform: state
    entity_id: sensor.button_matt
    to:
    - 'single'
    - 'double'
    - 'hold'
  condition:
  - condition: state
    entity_id: *bsmt_bed
    state: 'on'
  action:
  - service: script.turn_on
    data:
      entity_id: >
        {% set command = trigger.to_state.state %}
        {% if command == 'single' %}
          {% if is_state('light.guest_bedroom', 'on') %}
            script.good_night_andy_basement
          {% else %}
            script.good_night_basement
          {% endif %}
        {% else %}
          script.toggle_guest_bedroom_fan
        {% endif %}


- alias: Andy button - normal
  id: 'Sheiqueer6sheex5zie9ai'
  initial_state: true
  mode: parallel
  trigger:
  - platform: state
    entity_id: sensor.button_andy
    to: 
    - 'single'
    - 'hold'
  condition:
  - condition: state
    entity_id: input_boolean.guest_in_master
    state: 'off'
  action:
    service_template: >
      {% if trigger.to_state.state == 'single' %}
        {% if is_state('input_boolean.andy_sleep', 'off') %}
          script.good_night_andy
        {% else %}
          script.toggle_bedroom_fan
        {% endif %}
      {% else %}
        script.button_andy_test
      {% endif %}


- alias: Andy button - guest in master
  id: 'Sheiqedxcder6sheex5zie'
  initial_state: true
  mode: parallel
  trigger:
  - platform: state
    entity_id: sensor.button_andy
    to: 
    - 'single'
    - 'hold'
  condition:
  - condition: state
    entity_id: input_boolean.guest_in_master
    state: 'on'
  action:
  - service: "{{ 'light.turn_off' if is_state('light.master_bedroom_fan', 'on') or is_state('light.master_bedroom_lamps', 'on') else 'switch.toggle' }}"
    data:
      entity_id: >
        {{ 'light.master_bedroom_fan, light.master_bedroom_lamps' 
              if is_state('light.master_bedroom_fan', 'on') or is_state('light.master_bedroom_lamps', 'on') 
            else 'switch.master_bedroom_fan' }}
  - condition: state
    entity_id: &guest_sleep input_boolean.sleep_mode_guest
    state: 'off'
  - service: input_boolean.turn_on
    entity_id: *guest_sleep
  - service: script.turn_on
    entity_id: script.good_night_guest


script:
  toggle_bedroom_fan:
    sequence:
    - service: switch.toggle
      entity_id: switch.bedroom_fan
  
  early_departure:
    sequence:
    - service: script.turn_on
      entity_id: script.stop_white_noise
    - service: input_boolean.turn_off
      entity_id:
      - input_boolean.sleep_mode
      - input_boolean.andy_sleep
    - service: light.turn_on
      entity_id: 
      - light.master_bedroom_lamps
      - light.living_room_lamps
      - light.buffet
      data:
        transition: 30
        kelvin: 3000
        brightness_pct: 33
    - service: light.turn_on
      entity_id: light.kitchen_cabinets
      data:
        brightness_pct: 66
        transition: 1
    - service: alarm_control_panel.alarm_disarm
      entity_id: alarm_control_panel.home


  button_andy_test:
    sequence:
    - service: notify.gotify
      data:
        message: "Andy's button is working."


switch:
- platform: template
  switches:
    bedroom_fan:
      friendly_name: Bedroom fan
      value_template: "{{ is_state('switch.master_bedroom_fan', 'on') }}"
      turn_on:
      - service: switch.turn_on
        entity_id: switch.master_bedroom_fan
      - delay: 1
      - service: mqtt.publish
        data:
          topic: 'cmnd/master_bedroom_fan/tuyasend4'
          payload: '3,3' # max speed
      turn_off:
        service: switch.turn_off
        entity_id: switch.master_bedroom_fan


climate:
- platform: generic_thermostat
  name: Box fan
  heater: switch.box_fan
  ac_mode: true
  target_sensor: &bedroom_temp sensor.master_bedroom_temp
  min_temp: 64
  max_temp: 75
  cold_tolerance: 0
  hot_tolerance: 2
  precision: 0.5

# - platform: generic_thermostat
#   name: Bedroom AC 
#   heater: switch.bedroom_ac
#   ac_mode: true
#   target_sensor: *bedroom_temp
#   min_temp: 66
#   max_temp: 75
#   cold_tolerance: 0
#   hot_tolerance: 2
#   precision: 0.1
#   min_cycle_duration: '00:05:00'


input_number:
  bedroom_ac_temp_matt:
    name: Matt sleep
    min: 65
    max: 75
    step: 1
    mode: box

  bedroom_ac_temp_andy:
    name: Andy sleep
    min: 65
    max: 75
    step: 1
    mode: box