automation:
- alias: Disarm alarm - location
  initial_state: true
  trigger:
  - platform: state
    entity_id: device_tracker.pixel_xl
    from: 'not_home'
    to: 'home'
  condition:
  - condition: state
    entity_id: alarm_control_panel.abode
    state: 'armed_away'
    for: '01:00:00'
  action:
  - service: alarm_control_panel.alarm_disarm
    entity_id: alarm_control_panel.abode


- alias: Turn entrance light on upon entrance
  initial_state: true
  trigger:
  - entity_id: 
    - binary_sensor.front_door
    - binary_sensor.lumi_motion_1
    platform: state
    from: 'off'
    to: 'on'
  condition:
  - condition: template
    value_template: "{{ (as_timestamp(now()) - as_timestamp(state_attr('automation.turn_entrance_light_on_upon_entrance', 'last_triggered'))) > 60 }}"
  - condition: state
    entity_id: alarm_control_panel.abode
    state: 'armed_away'
  action:
  - service: homeassistant.turn_on
    entity_id: 
    - input_boolean.sensor_tripped
    - switch.light_switch_1
  - service: camera.record
    data_template:
      entity_id: camera.living_room_camera
      filename: "/config/recordings/{{ now().strftime('%m%d%Y-%H%M%S') }}.mp4"
      duration: 60
      lookback: 10


- alias: Alarm disarmed from away
  initial_state: true
  trigger:
  - entity_id: alarm_control_panel.abode
    platform: state
    from: 'armed_away'
    to: 'disarmed'
  action:
  - service_template: "script.disarmed_{{ 'keypad' if is_state('input_boolean.sensor_tripped', 'on') else 'loc' }}"
  - service: input_text.set_value
    entity_id: input_text.arrival_time
    data_template:
      value: "{{ now() }}"


- alias: Re-arm alarm in away mode
  initial_state: true
  trigger:
  - platform: state
    entity_id: input_boolean.disarmed_loc
    from: 'off'
    to: 'on'
    for: '00:10:00'
  action:
  - service: alarm_control_panel.alarm_arm_away
    entity_id: alarm_control_panel.abode


- alias: Activate away mode when armed away
  initial_state: true
  trigger:
  - platform: state
    entity_id: alarm_control_panel.abode
    to: 'armed_away'
  action:
  - service: script.away_mode
  - delay: '00:00:05'
  - condition: or
    conditions:
    - condition: state
      entity_id: sensor.tstat_profile
      state: 'Away'
    - condition: state
      entity_id: climate.thermostat
      state: 'off'
  - condition: state
    entity_id: group.lights_interior
    state: 'off'
  - service: script.notify_away
    data_template:
      title: Away mode activated


- alias: Away mode backup attempt
  initial_state: true
  trigger:
  - platform: state
    entity_id: alarm_control_panel.abode
    to: 'armed_away'
    for: '00:00:15'
  condition:
  - condition: or
    conditions:
    - condition: state
      entity_id: group.lights_all
      state: 'on'
    - condition: state
      entity_id: binary_sensor.any_speaker
      state: 'on'
    - condition: state
      entity_id: binary_sensor.any_tv
      state: 'on'
  action:
  - service: script.away_mode
  - delay: '00:00:05'
  - condition: state
    entity_id: group.lights_all
    state: 'off'
  - condition: state
    entity_id: binary_sensor.any_speaker
    state: 'off'
  - condition: state
    entity_id: binary_sensor.any_tv
    state: 'off'
  - service: script.notify_away
    data_template:
      title: Away mode activated (second attempt)


- alias: Master bedroom lights night arrival
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.wyze_motion_1
    from: 'off'
    to: 'on'
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: timer.master_bedroom_enter
  condition:
  - condition: template
    value_template: "{{ (as_timestamp(now()) | float - as_timestamp(states('input_text.arrival_time')) | float) / 60 <= 2 }}"
  action:
  - service_template: "{{ 'timer.cancel' if trigger.platform == 'state' and is_state('timer.master_bedroom_enter', 'active') else 'light.turn_off' }}"
    data_template:
      entity_id: "{{ 'timer.master_bedroom_enter' if trigger.platform == 'state' else 'light.master_bedroom' }}"


script:
  away_mode:
    sequence:
    - service: homeassistant.turn_off
      entity_id:
      - input_boolean.disarmed_loc
      - input_boolean.sensor_tripped
      - group.plugs
      - group.lights_all
      - climate.space_heater
    - service: media_player.turn_off
      entity_id: all
    - condition: state
      entity_id: input_boolean.christmas
      state: 'on'
    - service: switch.turn_off
      entity_id: switch.tuya_plug_2


  notify_away:
    sequence:
    - service: notify.mobile_app_pixel_xl
      data_template:
        title: "{{ title }}"
        message: >
          {% set profile = states('sensor.tstat_profile') %}
          {% set tstat = states('climate.thermostat') %}
          {% if tstat == 'off' %}
            Lights are off, thermostat is off.
          {% elif profile == 'Away' %}
            Lights are off, thermostat is set to away.
          {% else %}
            Uhh... this shouldn't be possible.
          {% endif %}
        data:
          ttl: 0
          priority: high
  
  
  disarmed_keypad:
    sequence:
    - service: input_boolean.turn_off
      entity_id: input_boolean.sensor_tripped
    - service: script.entrance_light_on
    - service: script.tstat_smart_resume_cool
    - service: script.arrival_night
  
  
  disarmed_loc:
    sequence:
    - service: input_boolean.turn_on
      entity_id: input_boolean.disarmed_loc
    - service: switch.turn_on
      entity_id: switch.light_switch_1
    - wait_template: "{{ is_state('binary_sensor.front_door', 'on') or is_state('binary_sensor.front_door_hk', 'on') or is_state('binary_sensor.lumi_motion_1', 'on') }}"
      timeout: '00:10:00'
      continue_on_timeout: false
    - service: script.entrance_light_on
    - wait_template: "{{ is_state('binary_sensor.front_door', 'off') }}"
      timeout: '00:10:00'
      continue_on_timeout: false
    - service: script.toggle_sensor_tripped
    - service: script.tstat_smart_resume_cool
    - service: script.arrival_night


  toggle_sensor_tripped:
    sequence:
    - service: input_boolean.turn_off
      entity_id: input_boolean.disarmed_loc
    - service: input_boolean.turn_on
      entity_id: input_boolean.sensor_tripped
    - service: input_boolean.turn_off
      entity_id: input_boolean.sensor_tripped


  entrance_light_on:
    sequence:
    - service: switch.turn_on
      entity_id: switch.light_switch_1
    - delay: '00:01:00'
    - service: switch.turn_off
      entity_id: switch.light_switch_1

  
  arrival_night:
    sequence:
    - condition: state
      entity_id: input_boolean.dark_inside
      state: 'on'
    - service_template: "script.lights_{{ 'christmas' if is_state('input_boolean.christmas_mode', 'on') else 'normal' }}"
    - service: timer.start
      entity_id: timer.master_bedroom_enter
      data:
        duration: '00:02:00'
  

  lights_normal:
    sequence:
    - service: hue.hue_activate_scene
      data:
        group_name: Dining room
        scene_name: Read
    - service: hue.hue_activate_scene
      data:
        group_name: Living room
        scene_name: Read lamps
    - service: hue.hue_activate_scene
      data:
        group_name: Master bedroom
        scene_name: Read
    - service: switch.turn_on
      entity_id: switch.plug_2


  lights_christmas:
    sequence:
    - service: switch.turn_on
      entity_id: 
      - switch.tuya_plug_2
      - switch.plug_2
    - service: hue.hue_activate_scene
      data:
        group_name: Dining room
        scene_name: Read
    - service: hue.hue_activate_scene
      data:
        group_name: Living room
        scene_name: Christmas
    - service: hue.hue_activate_scene
      data:
        group_name: Master bedroom
        scene_name: Read
    - delay: '00:01:00'
    - service: hue.hue_activate_scene
      data:
        group_name: Living room
        scene_name: Read lamps


input_boolean:
  sensor_tripped:
  disarmed_loc:

input_text:
  arrival_time:

timer:
  master_bedroom_enter: