automation:
- alias: Set speaker volume based on app
  initial_state: true
  mode: parallel
  trigger:
  - platform: state
    entity_id:
    - sensor.portable_speaker_app_name
    - sensor.bedroom_speaker_app_name
    - sensor.hub_app_name
    - sensor.kitchen_speaker_app_name
    - sensor.living_room_speaker_app_name
  - platform: state
    entity_id:
    - input_boolean.portable_speaker
    - input_boolean.bedroom_speaker
    - input_boolean.hub
    - input_boolean.kitchen_speaker
    - input_boolean.living_room_speaker
    to: 'off'
  condition:
  - condition: template
    value_template: "{{ trigger.to_state.state != '' }}"
  - condition: template
    value_template: "{{ not ('bedroom' in trigger.to_state.entity_id and is_state('input_boolean.white_noise', 'on')) }}"
  action:
  - service: media_player.volume_set
    data_template:
      entity_id: "media_player.{{ trigger.to_state.name.lower().replace(' ','_') }}"
      volume_level: >
        {% set app = trigger.to_state.state if trigger.to_state.domain == 'sensor' else states(trigger.to_state.entity_id.replace('input_boolean','sensor') + '_app_name') %}
        {% set speaker = trigger.to_state.entity_id.replace('sensor.','').replace('input_boolean','').replace('_speaker','').replace('_app_name','').replace('_',' ') %}
        {% if app in ['iHeartRadio', 'Default Media Receiver'] %}
          {% if speaker in ['portable'] %}
            0.42
          {% elif speaker in ['bedroom', 'kitchen', 'living room'] %}
            0.4
          {% elif speaker in ['hub'] %}
            0.5
          {% else %}
            0.4
          {% endif %}
        {% elif app in ['Google Play Music', 'Spotify'] %}
          {% if speaker in ['bedroom', 'kitchen', 'living room'] %}
            0.26
          {% elif speaker in ['portable'] %}
            0.24
          {% elif speaker in ['hub'] %}
            0.3
          {% else %}
            0.28
          {% endif %}
        {% else %}
          0.3
        {% endif %}


- alias: Boost speaker volume when furnace on
  initial_state: true
  trigger:
  - platform: state
    entity_id: sensor.hvac_action
    to: 'cooling'
  - platform: state
    entity_id: sensor.hvac_action
    to: 'heating'
    for: '00:00:43'
  - platform: state
    entity_id: media_player.living_room_speaker
    to: 'playing'
    for: '00:00:01'
  condition:
  - condition: state
    entity_id: sensor.hvac_action
    state: 'cooling'
  - condition: state
    entity_id: sensor.hvac_action
    state: 'heating'
    for: '00:00:43'
  - condition: template
    value_template: "{{ is_state('media_player.living_room_speaker', 'playing') and is_state_attr('media_player.living_room_speaker', 'is_volume_muted', false) }}"
  - condition: state
    entity_id: binary_sensor.quiet_hours
    state: 'off'
  action:
  - service: media_player.volume_set
    entity_id: media_player.living_room_speaker
    data_template:
      volume_level: "{{ 0.54 if states('sensor.living_room_app_name') in ['Default Media Receiver', 'iHeartRadio'] else 0.36 }}"


- alias: Lower speaker volume when furnace off
  initial_state: true
  trigger:
  - platform: state
    entity_id: sensor.hvac_action
    from: 'cooling'
    to:
    - 'idle'
    - 'off'
    for: '00:00:43'
  - platform: state
    entity_id: sensor.hvac_action
    from: 'heating'
    to:
    - 'idle'
    - 'off'
    for: '00:01:28'
  condition:
  - condition: state
    entity_id: binary_sensor.quiet_hours
    state: 'off'
  - condition: template
    value_template: "{{ states('media_player.living_room_speaker') in ['playing', 'paused'] and is_state_attr('media_player.living_room_speaker', 'is_volume_muted', false) }}"
  action:
    service: media_player.volume_set
    entity_id: media_player.living_room_speaker
    data_template:
      volume_level: "{{ 0.4 if states('sensor.living_room_app_name') in ['Default Media Receiver', 'iHeartRadio'] else 0.26 }}"


- alias: Adjust portable speaker volume space heater on/off
  initial_state: true
  trigger:
  - platform: state
    entity_id: sensor.space_heater_action
    from:
    - 'off'
    - 'idle'
    to: 'heating'
  - platform: state
    entity_id: sensor.space_heater_action
    from: 'heating'
    to: 
    - 'off'
    - 'idle'
  - platform: state
    entity_id: media_player.portable_speaker
    from:
    - 'off'
    - 'idle'
    to: 'playing'
    for: '00:00:01'
  - platform: state
    entity_id: media_player.portable_speaker
    from: 'playing'
    to:
    - 'off'
    - 'idle'
  condition:
  - condition: template
    value_template: "{{ is_state_attr('media_player.portable_speaker', 'is_volume_muted', false) }}"
  action:
  - service: media_player.volume_set
    entity_id: media_player.portable_speaker
    data_template:
      volume_level: > 
        {% if is_state('media_player.portable_speaker', 'playing') and is_state('sensor.space_heater_action', 'heating') %}
          {{ 0.46 if states('sensor.portable_speaker_app_name') in ['Default Media Receiver', 'iHeartRadio'] else 0.34 }}
        {% else %}
          {{ 0.42 if states('sensor.portable_speaker_app_name') in ['Default Media Receiver', 'iHeartRadio'] else 0.3 }}
        {% endif %}


- alias: Lower speaker volume when receiving a call
  initial_state: true
  trigger:
  - platform: state
    entity_id: sensor.pixel_xl_phone_state
    from: 'idle'
    to: 'ringing'
  - platform: state
    entity_id: sensor.pixel_xl_phone_state
    from: 
    - 'ringing'
    - 'offhook'
    to: 'idle'
  condition:
  - condition: state
    entity_id: binary_sensor.any_speaker
    state: 'on'
  action:
  - service: "input_boolean.turn_{{ 'on' if trigger.to_state.state == 'ringing' else 'off' }}"
    data:
      entity_id: >
        {%- for speaker in states.media_player if is_state(speaker.entity_id, 'playing') and speaker.object_id != 'all_speakers' -%}
        {{ speaker.entity_id.replace('media_player', 'input_boolean') }}{% if not loop.last %}, {% endif %}
        {%- endfor -%}
  - condition: template
    value_template: "{{ trigger.to_state.state == 'ringing' }}"
  - service: media_player.volume_set
    data:
      entity_id: >
        {%- for speaker in states.media_player if is_state(speaker.entity_id, 'playing') -%}
        {{ speaker.entity_id }}{% if not loop.last %}, {% endif %}
        {%- endfor -%}
      volume_level: 0.2


- alias: Mute/unmute speakers when in call
  initial_state: true
  trigger:
  - platform: state
    entity_id: sensor.pixel_xl_phone_state
    from: 
    - 'idle'
    - 'ringing'
    to: 'offhook'
  - platform: state
    entity_id: sensor.pixel_xl_phone_state
    from: 'offhook'
    to: 'idle'
  condition:
  - condition: state
    entity_id: binary_sensor.any_speaker
    state: 'on'
  action:
  - service: media_player.volume_mute
    data:
      entity_id: >
        {%- for speaker in states.media_player if is_state(speaker.entity_id, 'playing') and speaker.object_id != 'all_speakers' -%}
        {{ speaker.entity_id }}{% if not loop.last %}, {% endif %}
        {%- endfor -%}
      is_volume_muted: "{{ true if trigger.to_state.state == 'offhook' else false }}"


input_boolean:
  kitchen_speaker:
  hub:
  portable_speaker:
  living_room_speaker:
  bedroom_speaker: