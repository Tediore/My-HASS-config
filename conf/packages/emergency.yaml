automation:
- alias: Notify water leaked detected or cleared
  initial_state: true
  mode: parallel
  max: 100
  trigger:
  - platform: state
    entity_id: &water_sensors
    - binary_sensor.laundry_room_leak
    - binary_sensor.kitchen_leak
    - binary_sensor.hall_bath_toilet_leak
    - binary_sensor.hall_bath_sink_leak
    - binary_sensor.master_bath_toilet_leak
    - binary_sensor.master_bath_sink_leak
    to: 'on'
  - platform: state
    entity_id: *water_sensors
    from: 'on'
    to: 'off'
    for: '00:00:05'
  action:
  - service: notify.sms_matt
    data_template:
      message: &leak_message >
        {% if trigger.to_state.state == 'on' %}
          LEAK DETECTED BY {{ trigger.to_state.name.upper() }}!
        {% else %}
          {{ trigger.to_state.name }} cleared
        {% endif %}
  - service: notify.gotify_high
    data_template:
      title: &leak_title "{{ 'LEAK DETECTED!' if trigger.to_state.state == 'on' else 'Leak no longer detected.' }}"
      message: *leak_message
  - service: notify.mobile_app_pixel_xl
    data_template:
      title: *leak_title
      message: *leak_message
      data:
        ttl: 0
        priority: high


- alias: Notify smoke or CO
  initial_state: true
  mode: parallel
  trigger:
  - platform: state
    entity_id: sensor.smoke_alarm_status
  condition:
  - condition: state
    entity_id: alarm_control_panel.abode
    state: 'armed_away'
  - condition: template
    value_template: "{{ trigger.to_state.state in ['Smoke', 'CO'] or (trigger.from_state.state in ['Smoke', 'CO'] and trigger.to_state.state == 'OK') }}"
  action:
  - service: notify.sms_matt
    data_template:
      message: &smoke_message >
        {% if trigger.to_state.state in ['Smoke', 'CO'] %}
          {{ trigger.to_state.state.upper() }} DETECTED!
        {% else %}
          {{ trigger.from_state.state }} no longer detected.
        {% endif %}
  - service: notify.gotify_high
    data_template:
      title: &smoke_title >
        {% if trigger.to_state.state in ['Smoke', 'CO'] %}
          {{ trigger.to_state.state.upper() }} DETECTED!
        {% else %}
          {{ trigger.from_state.state }} cleared.
        {% endif %}
      message: *smoke_message
  - service: notify.mobile_app_pixel_xl
    data_template:
      title: *smoke_title
      message: *smoke_message
      data:
        ttl: 0
        priority: high


- alias: Turn on lights when smoke or CO detected
  initial_state: true
  mode: parallel
  trigger:
  - platform: state
    entity_id: sensor.smoke_alarm_status
    to: 
    - 'Smoke'
    - 'CO'
  condition:
  - condition: template
    value_template: "{{ states('alarm_control_panel.abode') in ['armed_home', 'disarmed'] }}"
  action:
  - service: light.turn_on
    entity_id:
    - light.master_bedroom
    - light.living_room
    data:
      color_name: red
      brightness_pct: 100
  - service: light.turn_on
    entity_id: light.buffet
    data:
      brightness_pct: 100
      kelvin: 3000
  - service: light.turn_on
    entity_id: light.entrance


- alias: Turn lights on when leak detected
  initial_state: true
  mode: parallel
  trigger:
  - platform: state
    entity_id: *water_sensors
    to: 'on'
  condition:
  - condition: template
    value_template: "{{ states('alarm_control_panel.abode') in ['armed_home', 'disarmed'] }}"
  action:
  - service: hue.hue_activate_scene
    data:
      group_name: Living room
      scene_name: Water
  - service: hue.hue_activate_scene
    data:
      group_name: Master bedroom
      scene_name: Water
  - service: light.turn_on
    entity_id: light.buffet
    data:
      color_name: blue
  - delay: '00:00:01'
  - service: light.turn_on
    entity_id:
    - light.buffet
    - light.master_bedroom
    - light.living_room
    data:
      brightness_pct: 100
      color_name: blue
      flash: long


- alias: Turn off HVAC when smoke detected
  initial_state: true
  trigger:
  - platform: state
    entity_id: sensor.smoke_alarm_status
    to: 'Smoke'
  action:
  - service: climate.turn_off
    entity_id: climate.thermostat


sensor:
- platform: template
  sensors:
    smoke_alarm_status:
      friendly_name: Smoke alarm status
      value_template: >
        {% set alarm = states('sensor.smoke_alarm_alarm_type') | float %}
        {% set level = states('sensor.smoke_alarm_alarm_level') | float %}
        {% if alarm == 13 and level == 255 %}
          OK
        {% elif alarm == 1 and level == 255 %}
          Smoke
        {% elif alarm == 2 and level == 255 %}
          CO
        {% elif alarm == 12 and level == 0 %}
          Test
        {% else %}
          Unknown
        {% endif %}
      icon_template: >
        {% set alarm = states('sensor.smoke_alarm_alarm_type') | float %}
        {% set level = states('sensor.smoke_alarm_alarm_level') | float %}
        {% if alarm == 13 and level == 255 %}
          mdi:smoke-detector
        {% elif alarm == 1 and level == 255 %}
          mdi:fire
        {% elif alarm == 2 and level == 255 %}
          mdi:cloud-alert
        {% elif alarm == 12 and level == 0 %}
          mdi:smoke-detector
        {% else %}
          mdi:cloud-question
        {% endif %}