script:
  tstat_heat_home:
    alias: Heat - home
    sequence:
    - wait_template: "{{ state_attr('climate.thermostat', 'target_temp_high') != None }}"
      timeout: '00:00:30'
      continue_on_timeout: true
    - service: input_boolean.turn_off
      entity_id:
      - input_boolean.tstat_away
      - input_boolean.tstat_hold
    - service: climate.set_temperature
      data:
        entity_id: climate.thermostat
        target_temp_low: "{{ states('input_number.tstat_heat_home') | int }}"
        target_temp_high: &no_cool >
          {{ states('input_number.tstat_cool_sleep') | int if is_state('input_boolean.tstat_cool_sleep', 'on') else states('input_number.tstat_cool_home') | int }}

  tstat_heat_sleep:
    alias: Heat - sleep
    sequence:
    - wait_template: "{{ state_attr('climate.thermostat', 'target_temp_high') != None }}"
      timeout: '00:00:30'
      continue_on_timeout: true
    - service: input_boolean.turn_off
      entity_id:
      - input_boolean.tstat_away
      - input_boolean.tstat_hold
    - service: climate.set_temperature
      data:
        entity_id: climate.thermostat
        target_temp_low: "{{ states('input_number.tstat_heat_sleep') | int }}"
        target_temp_high: *no_cool

  tstat_cool_home:
    alias: Cool - home
    sequence:
    - service: input_boolean.turn_off
      entity_id:
      - input_boolean.tstat_away
      - input_boolean.tstat_hold
    - service: climate.set_temperature
      data:
        entity_id: climate.thermostat
        target_temp_low: &no_heat >
          {{ states('input_number.tstat_heat_sleep') | int if is_state('input_boolean.tstat_heat_sleep', 'on') else states('input_number.tstat_heat_home') | int }}
        target_temp_high: "{{ states('input_number.tstat_cool_home') | int }}"
  
  tstat_cool_sleep:
    alias: Cool - sleep
    sequence:
    - service: input_boolean.turn_off
      entity_id:
      - input_boolean.tstat_away
      - input_boolean.tstat_hold
    - service: climate.set_temperature
      data:
        entity_id: climate.thermostat
        target_temp_low: *no_heat
        target_temp_high: "{{ states('input_number.tstat_cool_sleep') | int }}"

  tstat_away:
    alias: Thermostat away
    sequence:
    - service: input_boolean.turn_on
      entity_id: input_boolean.tstat_away
    - service: input_boolean.turn_off
      entity_id: input_boolean.tstat_hold
    - service: climate.set_temperature
      data:
        entity_id: climate.thermostat
        target_temp_low: "{{ states('input_number.tstat_heat_away') | int }}"
        target_temp_high: "{{ states('input_number.tstat_cool_away') | int }}"


input_number:
  tstat_cool_home:
    name: Home
    icon: mdi:home-outline
    min: 70
    max: 78
    step: 1
    unit_of_measurement: '°F'
    mode: slider
  
  tstat_cool_sleep:
    name: Sleep
    icon: mdi:sleep
    min: 70
    max: 78
    step: 1
    unit_of_measurement: '°F'
    mode: slider
  
  tstat_cool_away:
    name: Away
    icon: mdi:account-arrow-right
    min: 78
    max: 85
    step: 1
    unit_of_measurement: '°F'
    mode: slider
  
  tstat_heat_home:
    name: Home
    icon: mdi:home-outline
    min: 66
    max: 71
    step: 1
    unit_of_measurement: '°F'
    mode: slider
  
  tstat_heat_sleep:
    name: Sleep
    icon: mdi:sleep
    min: 65
    max: 70
    step: 1
    unit_of_measurement: '°F'
    mode: slider
  
  tstat_heat_away:
    name: Away
    icon: mdi:account-arrow-right
    min: 63
    max: 68
    step: 1
    unit_of_measurement: '°F'
    mode: slider


input_datetime:
  tstat_cool_home_workday: &tstat_times
    has_date: false
    has_time: true
  tstat_cool_home_weekend: *tstat_times
  tstat_heat_home_workday: *tstat_times
  tstat_heat_home_weekend: *tstat_times
  tstat_cool_sleep_workday: *tstat_times
  tstat_cool_sleep_weekend: *tstat_times
  tstat_heat_sleep_workday: *tstat_times
  tstat_heat_sleep_weekend: *tstat_times


input_boolean:
  tstat_away:
  tstat_hold:
    name: Ignore thermostat schedule
  tstat_sched_resume:
    name: Resume thermostat schedule
  tstat_smart:

  tstat_heat_sleep:
  tstat_cool_sleep:


input_text:
  tstat_prev_mode:
    name: Previous thermostat mode
  
  tstat_last_action:
    name: Last thermostat action


automation:
- alias: Record last tstat action
  initial_state: true
  trigger:
  - platform: state
    entity_id: climate.thermostat
    attribute: 'hvac_action'
    to:
    - 'heating'
    - 'cooling'
  action:
  - service: input_text.set_value
    data:
      entity_id: input_text.tstat_last_action
      value: "{{ state_attr('climate.thermostat', 'hvac_action') }}"


sensor:
- platform: template
  sensors:
    tstat_mode:
      friendly_name: HVAC
      value_template: >
        {% set tstat = states('climate.thermostat') %}
        {% set action = states('input_text.tstat_last_action') %}
        {% if tstat == 'off' %}
          Off
        {% else %}
          {{ action.capitalize().replace('ing','') }}
        {% endif %}
    
    tstat_profile:
      friendly_name: Profile
      value_template: >
        {% set low = state_attr('climate.thermostat', 'target_temp_low') | round(0) | int %}
        {% set high = state_attr('climate.thermostat', 'target_temp_high') | round(0) | int %}
        {% set mode = states('sensor.tstat_mode') %}
        {% if is_state('climate.thermostat', 'off') %}
          Off
        {% elif is_state('input_boolean.tstat_hold', 'on') %}
          Hold
        {% elif is_state('input_boolean.tstat_peak_savings_active', 'on') %}
          PTS
        {% elif is_state('input_boolean.tstat_smart', 'on') %}
          Smart
        {% elif is_state('input_boolean.tstat_away', 'on') %}
          Away
        {% elif mode == 'Heat' %}
          {% if low == states('input_number.tstat_heat_home') | int %}
            Home
          {% elif low == states('input_number.tstat_heat_sleep') | int %}
            Sleep
          {% elif low == states('input_number.tstat_heat_away') | int %}
            Away
          {% else %}
            Hold
          {% endif %}
        {% elif mode == 'Cool' %}
          {% if high == states('input_number.tstat_cool_home') | int %}
            Home
          {% elif high == states('input_number.tstat_cool_sleep') | int %}
            Sleep
          {% elif high == states('input_number.tstat_cool_away') | int %}
            Away
          {% else %}
            Hold
          {% endif %}
        {% else %}
          Hold
        {% endif %}
    
    tstat_current_temp:
      friendly_name: "Inside"
      value_template: "{{ state_attr('climate.thermostat','current_temperature') | float('-') }}"
      unit_of_measurement: '°F'
    
    tstat_current_humidity:
      friendly_name: "Humidity"
      value_template: "{{ state_attr('climate.thermostat','current_humidity') | float('-') | round(0) }}"
      unit_of_measurement: '%'
    
    tstat_setpoint:
      friendly_name: "Setpoint"
      value_template: "{{ state_attr('climate.thermostat','target_temp_low') | float('-') | round(0) if is_state('sensor.tstat_mode', 'Heat') else state_attr('climate.thermostat','target_temp_heat') | float('-') | round(0) }}"
      unit_of_measurement: '°F'
    
    tstat_target_low:
      friendly_name: Min
      value_template: "{{ state_attr('climate.thermostat', 'target_temp_low') | int if is_state('climate.thermostat', 'heat_cool') else 'Off' }}"
      unit_of_measurement: '°F'
    
    tstat_target_high:
      friendly_name: Max
      value_template: "{{ state_attr('climate.thermostat', 'target_temp_high') | int if is_state('climate.thermostat', 'heat_cool') else 'Off' }}"
      unit_of_measurement: '°F'